name: Build App

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    
env: 
 AZURE_WEBAPP_NAME: 'app-soat-bc22-man-dev-fr'


jobs:
  build:
    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: ./src

    steps:
    - uses: actions/checkout@v3

    - name: Setup .NET
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: 6.0.x

    - name: Cache NuGet packages
      uses: actions/cache@v3
      with:
        path: ~/.nuget/packages
        # Look to see if there is a cache hit for the corresponding requirements file
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
        restore-keys: |
          ${{ runner.os }}-nuget

    - name: Build
      run: dotnet build --configuration Release

    - name: Generate Database Initialisation Script
      run: |
        dotnet tool install --global dotnet-ef
        dotnet ef migrations script --configuration Release --no-build --idempotent --startup-project Soat.AntiGaspi.Api --output postgres/00_init.sql
    
    - name: Run Tests
      run: dotnet test -c Release --no-build --verbosity normal -l:trx;LogFileName=TestOutput.trx
    
    - name: Publish tests results
      uses: dorny/test-reporter@v1deploy: 
    runs-on: ubuntu-latest 
    needs: build 
    environment: 
      name: 'development' 
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }} 
    steps: 
      - uses: actions/checkout@v3 
      - name: Download build artifact 
      uses: actions/download-artifact@v3 
      with: 
        name: build-artifact 
        path: build 
      - name: Deploy to Azure WebApp 
      id: deploy-to-webapp 
      uses: azure/webapps-deploy@v2 
      with: 
        app-name: ${{ env.AZURE_WEBAPP_NAME }} 
        publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }} 
        package: './build' 
      if: success() || failure()     
      with:
        name: Test report             
        path: './src/Soat.AntiGaspi.Api.Tests/TestResults/*.trx'
        reporter: dotnet-trx


  deploy:
    runs-on: ubuntu-latest
    needs: build
    
    defaults:
      run:
        working-directory: ./deploy

    env:
      ARM_CLIENT_ID: ${{ secrets.CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.TENANT_ID }}

    environment:
      name: 'development'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}
    
    steps:
    - uses: actions/checkout@v3

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_wrapper: false

    - name: Terraform Init
      run: terraform init

    - name: Terraform Validate
      run: terraform validate

    - name: Terraform Apply
      id: terraform-apply
      run: terraform apply -auto-approve -var='SendGridApiKey=${{ secrets.SENDGRIDAPIKEY }}'
        
    - name: Terraform Outputs
      id: terraform-outputs
      run: |
        # Export Terraform output as step outputs
        $terraformOutput = (terraform output -json | ConvertFrom-Json -AsHashtable)     
        foreach ($key in $terraformOutput.Keys) {
          $outputVariableValue = $terraformOutput[$key].value
          Write-Output "::set-output name=${key}::${outputVariableValue}"
        } 
      shell: pwsh

    - name: Download SQL artifacts
      uses: actions/download-artifact@v3
      with:
        name: sql-artifact
        path: sql

    - uses: Azure/login@v1
      with:
        creds: '{"clientId":"${{ secrets.CLIENT_ID }}","clientSecret":"${{ secrets.CLIENT_SECRET }}","subscriptionId":"${{ secrets.SUBSCRIPTION_ID }}","tenantId":"${{ secrets.TENANT_ID }}"}'

    - name: Update Azure database
      uses: azure/postgresql@v1
      with:
        server-name: ${{ steps.terraform-outputs.outputs.postgresql_name }}
        connection-string: "psql \"host=${{ steps.terraform-outputs.outputs.postgresql_url }} port=5432 user=${{ steps.terraform-outputs.outputs.postgresql_user }} password=${{ steps.terraform-outputs.outputs.postgresql_password }} dbname=${{ steps.terraform-outputs.outputs.postgresql_database_name }} sslmode=require\""
        plsql-file: 'sql/00_init.sql'

    - name: Download build artifact
      uses: actions/download-artifact@v3
      with:
        name: build-artifact
        path: build

    - name: Deploy to Azure WebApp
      id: deploy-to-webapp
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ steps.terraform-outputs.outputs.web_app_name }}
        publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
        package: './build'